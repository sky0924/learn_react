{"ast":null,"code":"var _jsxFileName = \"/Users/kimhaneul/GitHub/learn_react/todo_list/src/routes/Home.js\";\nimport React, { Component } from 'react';\nimport Form from '../components/Form';\nimport Palette from '../components/Palette';\nimport TodoItemList from '../components/TodoItemList';\nimport TodoTemplate from '../components/TodoTemplate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = ['#000000', '#1d3557', '#6b705c', '#ff6b6b'];\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      input: '',\n      todos: [{\n        id: 0,\n        text: '할 일 1. Redux 이해 및 적용하기 ⭐️⭐️⭐️⭐️⭐️',\n        checked: false\n      }, {\n        id: 1,\n        text: '할 일 2. react-router-dom 이용하기',\n        checked: true\n      }, {\n        id: 2,\n        text: '할 일 3. image upload 기능 구현하기 ⭐️⭐️',\n        checked: true\n      }, {\n        id: 3,\n        text: '할 일 4. color 추가 및 삭제 기능 구현하기',\n        checked: false\n      }, {\n        id: 4,\n        text: '할 일 5. user id 및 password 입력 form 만들기 ⭐️',\n        checked: true\n      }, {\n        id: 5,\n        text: `할 일 6. 두 줄이 넘어가면 어떻게 되는지 테스트할 아주 길다랗고 길다란 문장, \n          크게 나쁘진 않은데 check-mark가 toggle 전환될 때마다 items의 width가 변화함`,\n        checked: true\n      }, {\n        id: 6,\n        text: '할 일 7. GitHub Page 만들기',\n        checked: true\n      }],\n      color: ''\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        input: e.target.value\n      });\n    };\n\n    this.handleCreate = () => {\n      const {\n        input,\n        todos,\n        color\n      } = this.state;\n      this.setState({\n        input: '',\n        todos: todos.concat({\n          id: todos.length,\n          text: input,\n          checked: false,\n          color\n        })\n      });\n    };\n\n    this.handleKeyPress = e => {\n      if (e.key === 'Enter') {\n        this.handleCreate();\n      }\n    };\n\n    this.handleToggle = id => {\n      const {\n        todos\n      } = this.state;\n      const index = todos.findIndex(todo => todo.id === id);\n      const selected = todos[index];\n      const nextTodos = [...todos];\n      nextTodos[index] = { ...selected,\n        checked: !selected.checked\n      };\n      this.setState({\n        todos: nextTodos\n      });\n    };\n\n    this.handleRemove = id => {\n      const {\n        todos\n      } = this.state;\n      this.setState({\n        todos: todos.filter(todo => todo.id !== id)\n      });\n    };\n\n    this.handleSelectColor = color => {\n      this.setState({\n        color\n      });\n    };\n  }\n\n  render() {\n    const {\n      input,\n      todos,\n      color\n    } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove,\n      handleSelectColor\n    } = this;\n    return /*#__PURE__*/_jsxDEV(TodoTemplate, {\n      form: /*#__PURE__*/_jsxDEV(Form, {\n        value: input,\n        onKeyPress: handleKeyPress,\n        onChange: handleChange,\n        onCreate: handleCreate,\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this),\n      items: /*#__PURE__*/_jsxDEV(TodoItemList, {\n        todos: todos,\n        onToggle: handleToggle,\n        onRemove: handleRemove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this),\n      palette: /*#__PURE__*/_jsxDEV(Palette, {\n        colors: colors,\n        selected: color,\n        onSelect: handleSelectColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kimhaneul/GitHub/learn_react/todo_list/src/routes/Home.js"],"names":["React","Component","Form","Palette","TodoItemList","TodoTemplate","colors","App","state","input","todos","id","text","checked","color","handleChange","e","setState","target","value","handleCreate","concat","length","handleKeyPress","key","handleToggle","index","findIndex","todo","selected","nextTodos","handleRemove","filter","handleSelectColor","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;AAEA,MAAMC,MAAM,GAAG,CAAC,SAAD,EAAW,SAAX,EAAsB,SAAtB,EAAiC,SAAjC,CAAf;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAU1BO,KAV0B,GAUlB;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,KAAK,EAAE,CACL;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,IAAI,EAAE,mCAAf;AAAoDC,QAAAA,OAAO,EAAE;AAA7D,OADK,EAEL;AAAEF,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,IAAI,EAAE,8BAAf;AAA+CC,QAAAA,OAAO,EAAE;AAAxD,OAFK,EAGL;AAAEF,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,IAAI,EAAE,kCAAf;AAAmDC,QAAAA,OAAO,EAAE;AAA5D,OAHK,EAIL;AAAEF,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,IAAI,EAAE,8BAAf;AAA+CC,QAAAA,OAAO,EAAE;AAAxD,OAJK,EAKL;AAAEF,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,IAAI,EAAE,0CAAf;AAA2DC,QAAAA,OAAO,EAAE;AAApE,OALK,EAML;AAAEF,QAAAA,EAAE,EAAE,CAAN;AACEC,QAAAA,IAAI,EAAG;AACf,kEAFM;AAGEC,QAAAA,OAAO,EAAE;AAHX,OANK,EAUL;AAAEF,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,IAAI,EAAE,wBAAf;AAAyCC,QAAAA,OAAO,EAAE;AAAlD,OAVK,CAFD;AAcNC,MAAAA,KAAK,EAAE;AAdD,KAVkB;;AAAA,SA4B1BC,YA5B0B,GA4BVC,CAAD,IAAO;AACpB,WAAKC,QAAL,CAAc;AACZR,QAAAA,KAAK,EAAEO,CAAC,CAACE,MAAF,CAASC;AADJ,OAAd;AAGD,KAhCyB;;AAAA,SA8C1BC,YA9C0B,GA8CX,MAAM;AACnB,YAAM;AAAEX,QAAAA,KAAF;AAASC,QAAAA,KAAT;AAAgBI,QAAAA;AAAhB,UAA0B,KAAKN,KAArC;AACA,WAAKS,QAAL,CAAc;AACZR,QAAAA,KAAK,EAAE,EADK;AAEZC,QAAAA,KAAK,EAAEA,KAAK,CAACW,MAAN,CAAa;AAClBV,UAAAA,EAAE,EAAED,KAAK,CAACY,MADQ;AAElBV,UAAAA,IAAI,EAAEH,KAFY;AAGlBI,UAAAA,OAAO,EAAE,KAHS;AAIlBC,UAAAA;AAJkB,SAAb;AAFK,OAAd;AASD,KAzDyB;;AAAA,SA4D1BS,cA5D0B,GA4DRP,CAAD,IAAO;AACtB,UAAGA,CAAC,CAACQ,GAAF,KAAU,OAAb,EAAsB;AACpB,aAAKJ,YAAL;AACD;AACF,KAhEyB;;AAAA,SAmE1BK,YAnE0B,GAmEVd,EAAD,IAAQ;AACrB,YAAM;AAAED,QAAAA;AAAF,UAAY,KAAKF,KAAvB;AACA,YAAMkB,KAAK,GAAGhB,KAAK,CAACiB,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAACjB,EAAL,KAAYA,EAApC,CAAd;AACA,YAAMkB,QAAQ,GAAGnB,KAAK,CAACgB,KAAD,CAAtB;AACA,YAAMI,SAAS,GAAG,CAAC,GAAGpB,KAAJ,CAAlB;AAEAoB,MAAAA,SAAS,CAACJ,KAAD,CAAT,GAAmB,EACjB,GAAGG,QADc;AAEjBhB,QAAAA,OAAO,EAAE,CAACgB,QAAQ,CAAChB;AAFF,OAAnB;AAMA,WAAKI,QAAL,CAAc;AACZP,QAAAA,KAAK,EAAEoB;AADK,OAAd;AAGD,KAlFyB;;AAAA,SAoF1BC,YApF0B,GAoFVpB,EAAD,IAAQ;AACrB,YAAM;AAAED,QAAAA;AAAF,UAAY,KAAKF,KAAvB;AACA,WAAKS,QAAL,CAAc;AACZP,QAAAA,KAAK,EAAEA,KAAK,CAACsB,MAAN,CAAaJ,IAAI,IAAIA,IAAI,CAACjB,EAAL,KAAYA,EAAjC;AADK,OAAd;AAGD,KAzFyB;;AAAA,SA2F1BsB,iBA3F0B,GA2FLnB,KAAD,IAAW;AAC7B,WAAKG,QAAL,CAAc;AACZH,QAAAA;AADY,OAAd;AAGD,KA/FyB;AAAA;;AAiG1BoB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEzB,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBI,MAAAA;AAAhB,QAA0B,KAAKN,KAArC;AACA,UAAM;AACJO,MAAAA,YADI;AAEJK,MAAAA,YAFI;AAGJG,MAAAA,cAHI;AAIJE,MAAAA,YAJI;AAKJM,MAAAA,YALI;AAMJE,MAAAA;AANI,QAOF,IAPJ;AASA,wBACE,QAAC,YAAD;AACE,MAAA,IAAI,eACF,QAAC,IAAD;AACE,QAAA,KAAK,EAAGxB,KADV;AAEE,QAAA,UAAU,EAAGc,cAFf;AAGE,QAAA,QAAQ,EAAGR,YAHb;AAIE,QAAA,QAAQ,EAAGK,YAJb;AAKE,QAAA,KAAK,EAAGN;AALV;AAAA;AAAA;AAAA;AAAA,cAFJ;AASE,MAAA,KAAK,eACH,QAAC,YAAD;AACE,QAAA,KAAK,EAAGJ,KADV;AAEE,QAAA,QAAQ,EAAGe,YAFb;AAGE,QAAA,QAAQ,EAAGM;AAHb;AAAA;AAAA;AAAA;AAAA,cAVJ;AAeE,MAAA,OAAO,eACL,QAAC,OAAD;AAAS,QAAA,MAAM,EAAGzB,MAAlB;AAA2B,QAAA,QAAQ,EAAGQ,KAAtC;AAA8C,QAAA,QAAQ,EAAGmB;AAAzD;AAAA;AAAA;AAAA;AAAA;AAhBJ;AAAA;AAAA;AAAA;AAAA,YADF;AAoBD;;AAhIyB;;AAoI5B,eAAe1B,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Form from '../components/Form';\nimport Palette from '../components/Palette';\nimport TodoItemList from '../components/TodoItemList';\nimport TodoTemplate from '../components/TodoTemplate';\n\nconst colors = ['#000000','#1d3557', '#6b705c', '#ff6b6b'];\n\nclass App extends Component {\n\n  /*\n  😯! \n    id의 초기값을 왜 설정해주는 걸까? \n    -> 마지막 id 값을 알 수 없기 때문임\n    -> todos.length로 항상 마지막의 id 값이 세팅되도록 함\n  */\n  // id = 7\n\n  state = {\n    input: '',\n    todos: [\n      { id: 0, text: '할 일 1. Redux 이해 및 적용하기 ⭐️⭐️⭐️⭐️⭐️', checked: false },\n      { id: 1, text: '할 일 2. react-router-dom 이용하기', checked: true },\n      { id: 2, text: '할 일 3. image upload 기능 구현하기 ⭐️⭐️', checked: true },\n      { id: 3, text: '할 일 4. color 추가 및 삭제 기능 구현하기', checked: false },\n      { id: 4, text: '할 일 5. user id 및 password 입력 form 만들기 ⭐️', checked: true },\n      { id: 5, \n        text: `할 일 6. 두 줄이 넘어가면 어떻게 되는지 테스트할 아주 길다랗고 길다란 문장, \n          크게 나쁘진 않은데 check-mark가 toggle 전환될 때마다 items의 width가 변화함`, \n        checked: true },\n      { id: 6, text: '할 일 7. GitHub Page 만들기', checked: true }\n    ],\n    color: ''\n  }\n\n  // 😯! input 태그에 입력된 값을 state의 input으로 넘긴다.\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value\n    });\n  }\n\n  /*\n  😯!\n    input: '' \n    -> input을 비운다.(초기화)\n\n    그러면 빈 값인 상태로 배열에 추가되지 않을까? \n    -> 배열에 추가되는 객체에는 text: input으로 state에서 값을 불러와 넣어주고,\n      비워지는 input은 실제로 사용자들이 입력하는 input 태그를 말한다.\n    \n    todos.concat(...) \n    -> 기존의 배열에 새로운 객체를 추가한 새로운 배열을 반환한다.\n  */\n  handleCreate = () => {\n    const { input, todos, color } = this.state;\n    this.setState({\n      input: '',\n      todos: todos.concat({\n        id: todos.length,\n        text: input,\n        checked: false,\n        color\n      })\n    });\n  }\n\n  // 😯! Enter 키를 눌러도 Create 버튼을 누른 것과 같이 동작한다.\n  handleKeyPress = (e) => {\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  // 🤔? 어지럽다.\n  handleToggle = (id) => {\n    const { todos } = this.state;\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index];\n    const nextTodos = [...todos];\n\n    nextTodos[index] = {\n      ...selected,\n      checked: !selected.checked\n    };\n    \n\n    this.setState({\n      todos: nextTodos\n    });\n  }\n\n  handleRemove = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  handleSelectColor = (color) => {\n    this.setState({\n      color\n    })\n  }\n\n  render() {\n    const { input, todos, color } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove,\n      handleSelectColor\n    } = this;\n\n    return (\n      <TodoTemplate \n        form={(\n          <Form \n            value={ input }\n            onKeyPress={ handleKeyPress }\n            onChange={ handleChange }\n            onCreate={ handleCreate }\n            color={ color } />\n        )} \n        items={(\n          <TodoItemList \n            todos={ todos }\n            onToggle={ handleToggle }\n            onRemove={ handleRemove } />\n        )}\n        palette={(\n          <Palette colors={ colors } selected={ color } onSelect={ handleSelectColor } />\n        )} />\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}