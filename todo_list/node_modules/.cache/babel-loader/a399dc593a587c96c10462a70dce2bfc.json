{"ast":null,"code":"var _jsxFileName = \"/Users/kimhaneul/GitHub/learn_react/todo_list/src/components/TodoItem.js\";\nimport React, { Component } from 'react';\nimport './TodoItem.css';\nimport { RiMoreFill } from 'react-icons/ri';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoItem extends Component {\n  /* \n  😯!\n    shouldComponentUpdate\n    -> 변경된 값만 렌더링한다.\n      nextProps는 this의 props와 비교하고, \n      nextState는 this의 state와 비교하여\n      값이나 상태가 변경된 부분만 return하여 렌더링한다.\n  🤔?\n    nextState는 안쓰는데 왜 선언했을까? 선언하지 않아도 되나? \n  */\n  shouldComponentUpdate(nextProps) {\n    return this.props.checked !== nextProps.checked;\n  }\n  /*\n  😯!\n    `todo-text ${ checked && 'checked' }`\n    -> checked가 true면 checked라는 className을 가진다.\n     e.stopPropagation()\n    -> event의 버블링(확산)을 막는다.\n  */\n\n\n  render() {\n    const {\n      text,\n      checked,\n      id,\n      color,\n      onToggle,\n      onRemove\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-item\",\n      onClick: () => onToggle(id),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"remove\",\n        onClick: e => {\n          e.stopPropagation();\n          onRemove(id);\n        },\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color\n        },\n        className: `todo-text ${checked && 'checked'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), checked && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"check-mark\",\n        children: \"\\u2713\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        className: \"more\",\n        to: \"./detail\",\n        children: /*#__PURE__*/_jsxDEV(RiMoreFill, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TodoItem;","map":{"version":3,"sources":["/Users/kimhaneul/GitHub/learn_react/todo_list/src/components/TodoItem.js"],"names":["React","Component","RiMoreFill","Link","TodoItem","shouldComponentUpdate","nextProps","props","checked","render","text","id","color","onToggle","onRemove","e","stopPropagation"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,gBAAP;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,IAAT,QAAqB,kBAArB;;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEI,EAAAA,qBAAqB,CAACC,SAAD,EAAY;AAC/B,WAAO,KAAKC,KAAL,CAAWC,OAAX,KAAuBF,SAAS,CAACE,OAAxC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AAEEC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,IAAF;AAAQF,MAAAA,OAAR;AAAiBG,MAAAA,EAAjB;AAAqBC,MAAAA,KAArB;AAA4BC,MAAAA,QAA5B;AAAsCC,MAAAA;AAAtC,QAAmD,KAAKP,KAA9D;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,OAAO,EAAG,MAAMM,QAAQ,CAACF,EAAD,CAAnD;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAwB,QAAA,OAAO,EAAII,CAAD,IAAO;AACvCA,UAAAA,CAAC,CAACC,eAAF;AACAF,UAAAA,QAAQ,CAACH,EAAD,CAAR;AACD,SAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAK,QAAA,KAAK,EAAG;AAAEC,UAAAA;AAAF,SAAb;AAAyB,QAAA,SAAS,EAAI,aAAaJ,OAAO,IAAI,SAAW,EAAzE;AAAA,+BACE;AAAA,oBAAOE;AAAP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cANF,EAWIF,OAAO,iBAAK;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXhB,eAcE,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAuB,QAAA,EAAE,EAAC,UAA1B;AAAA,+BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAoBD;;AA/C8B;;AAkDjC,eAAeJ,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport './TodoItem.css';\nimport { RiMoreFill } from 'react-icons/ri';\nimport { Link } from 'react-router-dom';\n\nclass TodoItem extends Component {\n\n  /* \n  😯!\n    shouldComponentUpdate\n    -> 변경된 값만 렌더링한다.\n      nextProps는 this의 props와 비교하고, \n      nextState는 this의 state와 비교하여\n      값이나 상태가 변경된 부분만 return하여 렌더링한다.\n  🤔?\n    nextState는 안쓰는데 왜 선언했을까? 선언하지 않아도 되나? \n  */\n  shouldComponentUpdate(nextProps) {\n    return this.props.checked !== nextProps.checked;\n  }\n\n  /*\n  😯!\n    `todo-text ${ checked && 'checked' }`\n    -> checked가 true면 checked라는 className을 가진다.\n\n    e.stopPropagation()\n    -> event의 버블링(확산)을 막는다.\n  */\n  render() {\n    const { text, checked, id, color, onToggle, onRemove } = this.props;\n\n    return (\n      <div className=\"todo-item\" onClick={ () => onToggle(id) }>\n        <div className=\"remove\" onClick={ (e) => {\n          e.stopPropagation();\n          onRemove(id)\n        } }>&times;</div>\n\n        <div style={ { color } } className={ `todo-text ${ checked && 'checked' }` }>\n          <div>{ text }</div>\n        </div>\n\n        {\n          checked && (<div className=\"check-mark\">&#x2713;</div>)\n        }\n\n        <Link className=\"more\" to=\"./detail\">\n          <RiMoreFill />\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;"]},"metadata":{},"sourceType":"module"}