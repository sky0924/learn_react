{"ast":null,"code":"var _jsxFileName = \"/Users/kimhaneul/GitHub/learn_react/todo_list/src/routes/Home.js\";\nimport React, { Component } from 'react';\nimport Form from '../components/Form';\nimport Palette from '../components/Palette';\nimport TodoItemList from '../components/TodoItemList';\nimport TodoTemplate from '../components/TodoTemplate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = ['#1d3557', '#6d6875', '#6b705c', '#ff6b6b'];\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.id = 3;\n    this.state = {\n      input: '',\n      todos: [{\n        id: 0,\n        text: 'hello',\n        checked: false\n      }, {\n        id: 1,\n        text: 'world',\n        checked: true\n      }, {\n        id: 2,\n        text: '!!',\n        checked: false\n      }],\n      color: '#343a40'\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        // input 태그에 입력된 값을 state의 input으로 넘긴다.\n        input: e.target.value\n      });\n    };\n\n    this.handleCreate = () => {\n      const {\n        input,\n        todos,\n        color\n      } = this.state;\n      this.setState({\n        // input을 비운다. 🤔? 빈 값이 배열에 추가되는 건 아닐까?\n        input: '',\n        // 기존의 todos 배열에 값을 추가하여 새로운 배열을 반환한다.\n        todos: todos.concat({\n          id: this.id++,\n          text: input,\n          checked: false,\n          color\n        })\n      });\n    };\n\n    this.handleKeyPress = e => {\n      if (e.key === 'Enter') {\n        // Enter 키를 눌러도 Create 버튼을 누른 것과 같이 동작한다.\n        this.handleCreate();\n      }\n    };\n\n    this.handleToggle = id => {\n      const {\n        todos\n      } = this.state;\n      const index = todos.findIndex(todo => todo.id === id);\n      const selected = todos[index];\n      const nextTodos = [...todos];\n      nextTodos[index] = { ...selected,\n        checked: !selected.checked\n      };\n      this.setState({\n        todos: nextTodos\n      });\n    };\n\n    this.handleRemove = id => {\n      const {\n        todos\n      } = this.state;\n      this.setState({\n        todos: todos.filter(todo => todo.id !== id)\n      });\n    };\n\n    this.handleSelectColor = color => {\n      this.setState({\n        color\n      });\n    };\n\n    this.handleGoDetail = () => {\n      /*#__PURE__*/\n      _jsxDEV(Link, {\n        to: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this);\n    };\n  }\n\n  render() {\n    const {\n      input,\n      todos,\n      color\n    } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove,\n      handleSelectColor,\n      handleGoDetail\n    } = this;\n    return /*#__PURE__*/_jsxDEV(TodoTemplate, {\n      form: /*#__PURE__*/_jsxDEV(Form, {\n        value: input,\n        onKeyPress: handleKeyPress,\n        onChange: handleChange,\n        onCreate: handleCreate,\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this),\n      items: /*#__PURE__*/_jsxDEV(TodoItemList, {\n        todos: todos,\n        onToggle: handleToggle,\n        onRemove: handleRemove,\n        goDetail: handleGoDetail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this),\n      palette: /*#__PURE__*/_jsxDEV(Palette, {\n        colors: colors,\n        selected: color,\n        onSelect: handleSelectColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kimhaneul/GitHub/learn_react/todo_list/src/routes/Home.js"],"names":["React","Component","Form","Palette","TodoItemList","TodoTemplate","colors","App","id","state","input","todos","text","checked","color","handleChange","e","setState","target","value","handleCreate","concat","handleKeyPress","key","handleToggle","index","findIndex","todo","selected","nextTodos","handleRemove","filter","handleSelectColor","handleGoDetail","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Form from '../components/Form';\nimport Palette from '../components/Palette';\nimport TodoItemList from '../components/TodoItemList';\nimport TodoTemplate from '../components/TodoTemplate';\n\nconst colors = ['#1d3557', '#6d6875', '#6b705c', '#ff6b6b'];\n\nclass App extends Component {\n\n  id = 3\n\n  state = {\n    input: '',\n    todos: [\n      { id: 0, text: 'hello', checked: false },\n      { id: 1, text: 'world', checked: true },\n      { id: 2, text: '!!', checked: false }\n    ],\n    color: '#343a40'\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      // input 태그에 입력된 값을 state의 input으로 넘긴다.\n      input: e.target.value\n    });\n  }\n\n  handleCreate = () => {\n    const { input, todos, color } = this.state;\n    this.setState({\n      // input을 비운다. 🤔? 빈 값이 배열에 추가되는 건 아닐까?\n      input: '',\n      // 기존의 todos 배열에 값을 추가하여 새로운 배열을 반환한다.\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false,\n        color\n      })\n    });\n  }\n\n  handleKeyPress = (e) => {\n    if(e.key === 'Enter') {\n      // Enter 키를 눌러도 Create 버튼을 누른 것과 같이 동작한다.\n      this.handleCreate();\n    }\n  }\n\n  // 🤔? 잘 모르겠다.\n  handleToggle = (id) => {\n    const { todos } = this.state;\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index];\n    const nextTodos = [...todos];\n\n    nextTodos[index] = {\n      ...selected,\n      checked: !selected.checked\n    };\n\n    this.setState({\n      todos: nextTodos\n    });\n  }\n\n  handleRemove = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  handleSelectColor = (color) => {\n    this.setState({\n      color\n    })\n  }\n\n  handleGoDetail = () => {(\n    <Link to=\"\" />\n  )}\n\n  render() {\n    const { input, todos, color } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove,\n      handleSelectColor,\n      handleGoDetail\n    } = this;\n\n    return (\n      <TodoTemplate \n        form={(\n          <Form \n            value={ input }\n            onKeyPress={ handleKeyPress }\n            onChange={ handleChange }\n            onCreate={ handleCreate }\n            color={ color } />\n        )} \n        items={(\n          <TodoItemList \n            todos={ todos }\n            onToggle={ handleToggle }\n            onRemove={ handleRemove }\n            goDetail={ handleGoDetail } />\n        )}\n        palette={(\n          <Palette colors={ colors } selected={ color } onSelect={ handleSelectColor } />\n        )} />\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}